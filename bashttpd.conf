#!/bin/bash

DIFFICULTY=3
DOCROOT=./data
BLOCKS_DIR=$DOCROOT/blocks
TX_DIR=$DOCROOT/transactions

mine_block() {
  local previous_block_idx=$(ls -t $BLOCKS_DIR | head -1)
  local previous_block_hash=$(sha256sum $BLOCKS_DIR/$previous_block_idx | head -c 64)

  local current_block_idx=$(expr $previous_block_idx + 1)
  local current_timestamp=$(date +%s)

  local proof_of_concept=0
  local current_block=""
  local current_block_hash=""
  local transactions_json=""

  local entries="$(ls $TX_DIR | sort -R | tail -5)"
  for file in $entries; do
    transactions_json+=$(cat $TX_DIR/$file)
    transactions_json+=','
  done

  [[ -z $transactions_json ]] || foo=${transactions_json::-1}

  block_first="{\"index\": $current_block_idx,\"timestamp\": $current_timestamp,\"proof\":"
  block_last=",\"transactions\": [$foo],\"previousBlockHash\": \"$previous_block_hash\"}"

  concurrency=6

#   current_block=$(echo "0 1 $block_first $block_last" | xargs -P $concurrency -n 4 ./proof.sh)
  current_block=$(./proof.sh 0 1 "$block_first" "$block_last")

  if ! [[ -f $BLOCKS_DIR/$current_block_idx ]]; then
    echo $current_block > $BLOCKS_DIR/$current_block_idx

    echo "{\"blocks\":[" > $DOCROOT/blockchain

    for f in $(ls $BLOCKS_DIR) ; do
      cat $BLOCKS_DIR/$f >> $DOCROOT/blockchain
      echo -n ","        >> $DOCROOT/blockchain
    done

    echo "]\",blockHeight\":$current_block_idx}" >> $DOCROOT/blockchain
    echo "{\"clientId\": \"$(cat $DOCROOT/client_id)\", \"currentBlockHeight\": $current_block_idx}" > $DOCROOT/client_info

    if ! [[ -z $transactions_json ]]; then
      cd $TX_DIR
      rm $entries
      cd -
    fi

    add_response_header "Content-Type" "application/json"
    send_response_ok_exit < \
      <(echo "{
        \"message\":   \"Mined a block..\",
        \"blockHash\": \"$current_block_hash\",
        \"block\":     $current_block
      }")
  else
    add_response_header "Content-Type" "text/plain"
    fail_with 409
  fi
}

create_transaction() {
  log "trying to create transaction"
  local transaction_id=$(uuid)
  local transaction_timestamp=$(date +%s)

  echo $REQUEST_BODY | ./JSON.awk - > /dev/null 2>&1
  if [[ $? == 0 ]]; then
    local transaction_payload=$REQUEST_BODY

    local transaction="{
        \"id\":        \"$transaction_id\",
        \"timestamp\": $transaction_timestamp,
        \"payload\":   $transaction_payload,
        \"confirmed\": false
      }"

    LC_ALL=C echo $transaction > $TX_DIR/$transaction_id
    log "reating transaction succeeded"

    add_response_header "Content-Type" "application/json"
    send_response 201 <<< $transaction
  else
    log "reating transaction failed"
    fail_with 400
  fi
}

function serve_transaction() {
  local URL_PATH=$TX_DIR/$2
  shift

  # sanitize URL_PATH
  URL_PATH=${URL_PATH//[^a-zA-Z0-9_~\-\.\/]/}
  [[ $URL_PATH == *..* ]] && fail_with 400

  add_response_header "Content-Type" "application/json"

  if [[ -f $URL_PATH ]]; then
    [[ -r $URL_PATH ]] && \
      serve_file "$URL_PATH" "$@" || fail_with 403
  fi

  fail_with 404
}

function validate_blockchain() {
    count=$(ls -t $BLOCKS_DIR | head -c1)

    for ((i=1;i<=$count;i++)); do
        sum=$(sha256sum $BLOCKS_DIR/$i | head -c64)
        check=$(echo $BLOCKS_DIR/$(expr $i + 1) | ./JSON.awk | grep -i previousBlockHash | cut -f2 | sed s/\"//g)
        if [[ "$sum" == "$check" ]]; then
            echo -e "block $i ok"
        else
            echo -e "---------- block $i NOT ok ----------"
            echo
            return 1
        fi
    done
    return 0
}

function register_node() {
  node_addr=$(echo $REQUEST_BODY | ./JSON.awk - | grep '["host"]' | cut -f2)

  node_id=$(curl --connect-timeout 1 -s $node_addr | ./JSON.awk - | grep '["nodeId"]' | cut -f2)
  log $node_id

  add_response_header "Content-Type" "application/json"

  if [[ -z $node_id ]]; then
    send_response 404
    exit 0
  else
    grep $node_addr "$DOCROOT/nodes"
    if [[ $? -gt 0 ]]; then
      echo $node_addr >> "$DOCROOT/nodes"
      send_response 200 <<< "{
        \"message\": \"Node already known\",
        \"node\": {
          \"nodeId\": \"$node_id\"
          \"host\": \"$node_addr\"
        }
      }"
    else
      send_response 201 <<< "{
        \"message\": \"New node added\",
        \"node\": {
          \"nodeId\": \"$node_id\"
          \"host\": \"$node_addr\"
        }
      }"
    fi
  fi

  exit 0
}

# function fetch_transactions_from_nodes() {
#
# }

on_uri_match "GET"  '^/$'                   serve_file "$DOCROOT/client_info"
on_uri_match "GET"  '^/blocks$'             serve_file "$DOCROOT/blockchain"
on_uri_match "GET"  '^/blocks/(.*)$'        serve_dir_or_file_from $BLOCKS_DIR
on_uri_match "GET"  '^/mine$'               mine_block
on_uri_match "GET"  '^/validate'            validate_blockchain

on_uri_match "GET"  '^/transactions/?$'     serve_dir_with_ls $TX_DIR
on_uri_match "GET"  '^/transactions/(.*)$'  serve_transaction
on_uri_match "GET"  '^/transactions/new$'   serve_file "$DOCROOT/new_transaction"
on_uri_match "POST" '^/transactions/?$'     create_transaction

on_uri_match "GET"  '^/nodes/?$'            serve_file "$DOCROOT/nodes"
on_uri_match "POST" '^/nodes/register$'     register_node

unconditionally serve_static_string 'Please use the correct endpoint.'
